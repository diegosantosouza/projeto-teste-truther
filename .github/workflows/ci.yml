name: Application CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_ENV: test
  CI: true

jobs:
  quality-check:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --immutable

      - name: Run ESLint
        run: npm run lint
        env:
          CI: true

      - name: Check code formatting
        run: npm run format:check
        env:
          CI: true

      - name: Run TypeScript check
        run: npx tsc --noEmit

  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: quality-check

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --immutable

      - name: Run tests with coverage
        run: npm run test:coverage --forceExit
        env:
          LOG_LEVEL: error
          CI: true
          NODE_ENV: test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t app:ci .
          docker images

      - name: Test Docker image
        run: |
          # Test if the image can start without errors
          docker run --rm --name test-container app:ci node --version
          docker run --rm --name test-container app:ci npm --version

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: |
            .dockerignore
            Dockerfile
          retention-days: 1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [quality-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --immutable

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-check, test, build, security]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --immutable

      - name: Build application
        run: npm run build

      - name: Comment PR with build status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'All checks passed! Build is ready for review.'
            })
