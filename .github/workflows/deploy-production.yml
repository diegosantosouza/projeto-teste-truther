name: Deploy to Production - Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_ENV: production
  PROJECT_NAME: truther-api
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  IMAGE_TAG: ${{ github.sha }}
  CI: true

jobs:
  deploy:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Create Artifact Registry repository
        run: |
          # Check if repository exists
          if ! gcloud artifacts repositories describe ${{ env.PROJECT_NAME }} --location=${{ env.GCP_REGION }} --quiet 2>/dev/null; then
            echo "Creating Artifact Registry repository..."
            gcloud artifacts repositories create ${{ env.PROJECT_NAME }} \
              --repository-format=docker \
              --location=${{ env.GCP_REGION }} \
              --description="Truther API Docker repository" \
              --quiet
          else
            echo "Repository ${{ env.PROJECT_NAME }} already exists"
          fi

      - name: Verify repository permissions
        run: |
          echo "Verifying repository permissions..."
          gcloud artifacts repositories describe ${{ env.PROJECT_NAME }} --location=${{ env.GCP_REGION }}
          echo "Repository permissions verified successfully"

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/app:${{ env.IMAGE_TAG }} .
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/app:${{ env.IMAGE_TAG }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.PROJECT_NAME }}
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/app:${{ env.IMAGE_TAG }}
          region: ${{ env.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=3000
            --memory=512Mi
            --cpu=1
            --max-instances=1
            --min-instances=0
            --timeout=300

      - name: Show service URL
        run: echo "Service URL ${{ steps.deploy.outputs.url }}"

      - name: Health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 30

          # Retry health check with timeout
          for i in {1..5}; do
            echo "Health check attempt $i/5"
            if curl -f --max-time 30 ${{ steps.deploy.outputs.url }}/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

          # Final check
          curl -f --max-time 30 ${{ steps.deploy.outputs.url }}/health || exit 1

      - name: Create deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const deploymentInfo = {
                service: '${{ env.PROJECT_NAME }}' || 'truther-api',
                url: '${{ steps.deploy.outputs.url }}' || 'N/A',
                commit: '${{ env.IMAGE_TAG }}' || '${{ github.sha }}',
                commitMessage: '${{ github.event.head_commit.message }}' || 'No commit message',
                author: '${{ github.event.head_commit.author.name }}' || 'Unknown',
                timestamp: '${{ github.event.head_commit.timestamp }}' || new Date().toISOString()
              };

              console.log('Deployment info:', JSON.stringify(deploymentInfo, null, 2));

              const summary = `## Production Deployment Successful

              **Service:** ${deploymentInfo.service}
              **URL:** ${deploymentInfo.url}
              **Commit:** ${deploymentInfo.commit.substring(0, 7)}
              **Message:** ${deploymentInfo.commitMessage}
              **Author:** ${deploymentInfo.author}
              **Deployed at:** ${deploymentInfo.timestamp}

              ---
              *Deployment completed successfully*`;

              console.log('Creating commit comment...');
              
              const response = await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: summary
              });

              console.log('Commit comment created successfully:', response.data.html_url);
            } catch (error) {
              console.error('Error creating commit comment:', error.message);
              console.error('Error details:', JSON.stringify(error, null, 2));
              
              // Don't fail the workflow if comment creation fails
              core.warning('Failed to create commit comment, but deployment was successful');
            }
